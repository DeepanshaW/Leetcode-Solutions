/*
Return the root node of a binary search tree that matches the given preorder traversal.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 10^8
The values of preorder are distinct.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        int size=preorder.length;
        if(size==0) return null;
        TreeNode root=new TreeNode(preorder[0]);
        for(int i=1;i<size;i++)
         util(root,preorder[i]);
        return root;
    }
    public TreeNode util(TreeNode root,int val){
        if(root==null)
            return new TreeNode(val);
        if(val<=root.val)
                root.left=util(root.left,val);
        else
                root.right=util(root.right,val);
        return root;
    }
}
