/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.
Input: [3,2,3]
Output: 3
*/
//Solution 1 :
class Solution {
    public int majorityElement(int[] nums) {
       int n=nums.length; int k=-1;
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<n;i++){
            if(map.containsKey(nums[i]))
                map.put(nums[i],map.get(nums[i])+1);
                else
                    map.put(nums[i],1);
        }
        for(Map.Entry<Integer,Integer> m:map.entrySet()){
            if(m.getValue()>(n/2))
                k=m.getKey();
        }
        return k;
    }
}

//Solution 2 :
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
