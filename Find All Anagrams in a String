/*
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
*/
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        if(s.length()<=0 || p.length()<=0 || p.length()>s.length())
            return new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        int[] map=new int[26];
        int[] map2=new int[26];
        for(char c:p.toCharArray()){
            map[c-'a']++;
        }
        
        for(int k=0;k<p.length();k++)
           map2[s.charAt(k)-'a']++;
        
        if(equals(map,map2)){
            list.add(0);
        }
        
        for(int j=0;j<s.length()-p.length();j++){
            map2[s.charAt(j+p.length())-'a']++;
             map2[s.charAt(j)-'a']--;
            
            if(equals(map,map2)){
                list.add(j+1);
            }
           
        }
        return list;
    }
    public boolean equals(int[] arr1,int[] arr2){
        for(int i=0;i<26;i++){
            if(arr1[i]!=arr2[i])
                return false;
        }
        return true;
    }
}
