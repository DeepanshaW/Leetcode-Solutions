/*
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
*/

class Trie {

    /** Initialize your data structure here. */
    class TrieNode{
        TrieNode[] children=new TrieNode[26];
        boolean isEnd=false;
    }
    TrieNode root;
    public Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode node=root;
        for(char ch:word.toCharArray()){
            if(node.children[ch-'a']==null){
               node.children[ch-'a']=new TrieNode(); 
            }
            node=node.children[ch-'a'];
        }
        node.isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode node=searchWord(word);
        return node!=null && node.isEnd;
    }
     public TrieNode searchWord(String word){
         TrieNode node=root;
         for(int i=0;i<word.length();i++){
             char ch=word.charAt(i);
             if(node.children[ch-'a']!=null){
                 node=node.children[ch-'a'];
             }
             else return null;
         }
         return node;
     }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode node=searchWord(prefix);
        return node!=null;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
